// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(uuid())
  email      String        @unique
  name       String
  gender     String
  password   String
  birthYear  Int
  createdAt  DateTime      @default(now())
  changedAt  DateTime?     @updatedAt

  trainings  TrainingLog[]
  exerciseLog  ExerciseLog[]
  sets       SetLog[]
  nutrition  NutritionLog[]
  bodyLogs   BodyLog[]
  trainingsPlan  TrainingsPlan[]
  exercises  Exercises[]
}

model TrainingLog {
  id              String       @id @default(uuid())
  userId          String
  createdAt       DateTime     @default(now())
  changedAt       DateTime?    @updatedAt
  type            String
  mode            String?
  score           Float?
  notes           String?
  caloriesBurned  Float?
  duration        Int?
  avgHeartRate    Int?
  pauses          Int          @default(0)
  pauseLength     Int          @default(0)

  user            User         @relation(fields: [userId], references: [id])
  exercises       ExerciseLog[]
}

model ExerciseLog {
  id         String        @id @default(uuid())
  userId     String
  trainingId String
  name       String
  createdAt  DateTime      @default(now())
  changedAt  DateTime?     @updatedAt
  order      Int           @default(autoincrement())
  notes      String?

  sets       SetLog[]
  user       User          @relation(fields: [userId], references: [id])
  training   TrainingLog   @relation(fields: [trainingId], references: [id], onDelete: Cascade)
}

model SetLog {
  id           String      @id @default(uuid())
  exerciseId   String
  userId       String
  type         String?
  createdAt    DateTime    @default(now())
  changedAt    DateTime?   @updatedAt
  order        Int         @default(autoincrement())
  reps         Int
  repUnit      String      @default("Wdh.")
  weight       Float

  user         User        @relation(fields: [userId], references: [id])
  exercise     ExerciseLog @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model NutritionLog {
  id        String         @id @default(uuid())
  userId    String
  createdAt DateTime       @default(now())
  changedAt DateTime?      @updatedAt
  mealType  String
  kcal      Int
  protein   Int
  carbs     Int
  fat       Int

  user      User           @relation(fields: [userId], references: [id])
}

model BodyLog {
  id         String        @id @default(uuid())
  userId     String
  createdAt  DateTime      @default(now())
  changedAt  DateTime?     @updatedAt
  weight     Float
  height     Float
  fatMass    Float?
  fatPercentage Float?
  muscleMass Float?
  waterMass   Float?
  BMI        Float?
  BMR        Float?

  user       User          @relation(fields: [userId], references: [id])
}

model TrainingsPlan {
  id          String        @id @default(uuid())
  userId      String
  name        String
  createdAt   DateTime      @default(now())
  changedAt   DateTime?     @updatedAt
  exercises   Exercises[]

  user       User          @relation(fields: [userId], references: [id])
}

model Exercises {
  id          String        @id @default(uuid())
  userId      String
  name        String        @unique
  createdAt   DateTime      @default(now())
  changedAt   DateTime?     @updatedAt

  user       User          @relation(fields: [userId], references: [id])
  trainingsPlan TrainingsPlan[]
}